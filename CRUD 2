#1. To gain insights into audience tastes, Acme Studios wants to identify the most popular movies in their database. This can be achieved by analyzing the "popularity" field within the "movies" table.
Write a query to find the movie titles, taglines, and directors for the top 5 popular movies.
Result:
Return the columns 'original_title', 'tagline', and 'director'.

CODE - 

SELECT original_title, tagline, director
FROM movies
ORDER BY popularity DESC
LIMIT 5;

#2. Write a query to find the ids of products that are both low-fat and recyclable. Return the result ordered by product_id in ascending order

CODE-

SELECT product_id
FROM Products
WHERE low_fats = 'Y' AND recyclable = 'Y'
ORDER BY product_id ASC;

#3. Wite a query to fetch customers customere name phone addressline 1 city state postalcode who are not from Germany Return the result ordered by customerName in ascending order

CODE - 

SELECT customerName, phone, addressLine1, city, state, postalCode
FROM customers
WHERE country != 'Germany'
ORDER BY customerName ASC;

#4 Write an SQL query to report the patient_id who have Type I Diabetes. Patients with Type I Diabetes will have "DIAB1" as prefix in any of the words in the conditions data.
Return the results ordered by patient_id in ascending order.

CODE -

SELECT patient_id
FROM patients
WHERE conditions LIKE 'DIAB1%' OR conditions LIKE '% DIAB1%'
ORDER BY patient_id ASC;

#5 Find the details of the movies that are released between the year 2012 - 2015 (including 2012 and 2015)
Return the original_title, genres, vote_average, revenue, Return the result ordered by original_title in ascending order

CODE - 

SELECT original_title, genres, vote_average, revenue
FROM movies
WHERE release_year BETWEEN 2012 AND 2015
ORDER BY original_title ASC;

#6 Find the details of the movies that are released between the year 2012 - 2015 ( not including 2012 and 2015)
Return the original_title, genres, vote_average, revenue, Return the result ordered by original_title in ascending order

-CODE 

SELECT original_title, genres, vote_average, revenue
FROM Movies
WHERE release_year > 2012 AND release_year < 2015
ORDER BY original_title ASC;

#7 Write a query to rank countries based on their medal count prioritizing gold, silver, and bronze medals

-CODE 

SELECT country, gold_medals, silver_medals, bronze_medals
FROM olympic
ORDER BY
gold_medals DESC,
silver_medals DESC,
bronze_medals DESC,
country ASC;

#8 Write a query to list down all the movies along with their details that have keywords like 'sport' or 'sequel' or 'suspense'
Result:
Return the columns 'original_title', 'director', 'genres', 'cast', 'budget', 'revenue', 'runtime', and 'vote_average'.
Return the columns ordered by original_title in ascending order.

-CODE

SELECT 
    original_title, 
    director, 
    genres, 
    cast, 
    budget, 
    revenue, 
    runtime, 
    vote_average
FROM 
    Movies
WHERE 
    keywords LIKE '%sport%' 
    OR keywords LIKE '%sequel%' 
    OR keywords LIKE '%suspense%'
ORDER BY 
    original_title ASC;

#9 Write an SQL query to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.

-CODE

SELECT DISTINCT author_id AS id
FROM views
WHERE author_id = viewer_id
ORDER BY author_id ASC;

#10 Write a query to get the list of city names starting with vowels (i.e., a, e, i, o, or u) from station table.
The result should not contain duplicate values.
Return the result table ordered by city in ascending order.

-CODE

SELECT DISTINCT city
FROM station
WHERE city REGEXP '^[aeiouAEIOU]'
ORDER BY city ASC;

#11 Write a query to report the IDs of the low-quality problems.
A problem is low-quality if the like percentage of the problem (the number of likes divided by the total number of votes) is strictly less than 60%.
Return the result table ordered by problem_id in ascending order.

-CODE

SELECT problem_id
FROM problems
WHERE (likes / (likes + dislikes)) < 0.6
ORDER BY problem_id ASC;

#12 Olympic 

-CODE 

SELECT country, gold_medals, silver_medals, bronze_medals
FROM Olympic
ORDER BY gold_medals DESC, 
         silver_medals DESC, 
         bronze_medals DESC, 
         country ASC;

#13 Retrieve the names of products whose names contain the letter 'A' 
and have a price between \$50 and \$100 (excluding 50 and 100). Choose the correct SQL query.

-CODE

SELECT product_name 
FROM products
WHERE 
product_name LIKE '%A%'
AND price > 50 AND price < 100;











